// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class FLTDataModel;
@class FLTPreJoinClassRequest;
@class FLTJoinClassRequest;
@class FLTReceivedData;
@class FLTNilData;
@class FLTStringData;
@class FLTBoolData;
@class FLTIntData;

@interface FLTDataModel : NSObject
@property(nonatomic, strong, nullable) NSNumber * code;
@property(nonatomic, copy, nullable) NSString * msg;
@property(nonatomic, copy, nullable) NSString * data;
@end

@interface FLTPreJoinClassRequest : NSObject
@property(nonatomic, strong, nullable) NSNumber * appId;
@property(nonatomic, copy, nullable) NSString * userId;
@property(nonatomic, copy, nullable) NSString * userSig;
@end

@interface FLTJoinClassRequest : NSObject
@property(nonatomic, strong, nullable) NSNumber * roomId;
@end

@interface FLTReceivedData : NSObject
@property(nonatomic, strong, nullable) FlutterStandardTypedData * data;
@property(nonatomic, copy, nullable) NSString * extension;
@end

@interface FLTNilData : NSObject
@property(nonatomic, strong, nullable) NSNumber * value;
@end

@interface FLTStringData : NSObject
@property(nonatomic, copy, nullable) NSString * value;
@end

@interface FLTBoolData : NSObject
@property(nonatomic, strong, nullable) NSNumber * value;
@end

@interface FLTIntData : NSObject
@property(nonatomic, strong, nullable) NSNumber * value;
@end

@protocol FLTPigeonApi
-(void)preJoinClass:(nullable FLTPreJoinClassRequest *)input completion:(void(^)(FLTDataModel *_Nullable, FlutterError *_Nullable))completion;
-(void)joinClass:(nullable FLTJoinClassRequest *)input completion:(void(^)(FLTDataModel *_Nullable, FlutterError *_Nullable))completion;
-(void)quitClass:(void(^)(FLTDataModel *_Nullable, FlutterError *_Nullable))completion;
-(void)receiveData:(nullable FLTReceivedData *)input completion:(void(^)(FLTDataModel *_Nullable, FlutterError *_Nullable))completion;
-(void)setBackgroundColor:(nullable FLTStringData *)input completion:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)reset:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)addBackgroundImage:(nullable FLTStringData *)input completion:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)isHaveBackgroundImage:(void(^)(FLTBoolData *_Nullable, FlutterError *_Nullable))completion;
-(void)removeBackgroundImage:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)drawGraffiti:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)drawLine:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)drawSquare:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)drawCircular:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)drawText:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)eraserDrawer:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)rollbackDraw:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)wipeDraw:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)setToolColor:(nullable FLTStringData *)input completion:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
-(void)setToolSize:(nullable FLTIntData *)input completion:(void(^)(FLTNilData *_Nullable, FlutterError *_Nullable))completion;
@end

extern void FLTPigeonApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTPigeonApi> _Nullable api);

@interface FLTPigeonFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)exitRoom:(FLTDataModel*)input completion:(void(^)(FLTNilData*, NSError* _Nullable))completion;
- (void)receiveData:(FLTReceivedData*)input completion:(void(^)(FLTDataModel*, NSError* _Nullable))completion;
- (void)historySyncCompleted:(void(^)(FLTNilData*, NSError* _Nullable))completion;
@end
NS_ASSUME_NONNULL_END
